Theory turbo_codes

Ancestors recursive_parity_equations interleave bcjr

(* -------------------------------------------------------------------------- *)
(* Idea: allow turbo codes to be defined in such a way that encoding and      *)
(* decoding can be defined simultaneously, or the factor graph can be derived *)
(* automatically based on the working that is being done.                     *)
(*                                                                            *)
(* The encoding algorithm takes an input and maps it to a codespace.    XF      *)
(*                                                                            *)
(*                                                                            *)
(*                                                                            *)
(*                                                                            *)
(*                                                                            *)
(* Factor graph relates to the probability of                                 *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* This is largely based on "Modern Coding Theory" by Tom Richardson and      *)
(* Rüdiger Urbanke.                                                           *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* An implementation of parallel turbo codes                                  *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* Encodes a parallel turbo code.                                             *)
(*                                                                            *)
(* This includes the systematic bits, output bits generated by running a      *)
(* recursive convolutional code on the unpermuted input, and output bits      *)
(* generated by running a second recursive convolutional code on the permuted *)
(* input.                                                                     *)
(*                                                                            *)
(* (ps, qs): The set of numerator and denominator parity equations to         *)
(*           convolve, represented as bool lists, where the rightmost element *)
(*           corresponds to the most recently read input.                     *)
(* perm: the permutation to use before applying the second set of parity      *)
(*       equations                                                            *)
(* bs: the input bitstring                                                    *)
(*                                                                            *)
(* Output: a bitstring representing the interleaved systematic bits, output   *)
(*         bits of the first code, and output bits of the second code.        *)
(*                                                                            *)
(* Uses zero-tailed encoding. When we reach the end of the string, feedback   *)
(* is disabled, and sufficiently many zeroes are subsequently provided as     *)
(* input to each of the component parity equations to ensure that they end in *)
(* the zero-state. These zeroes are also appended to the input.               *)
(* -------------------------------------------------------------------------- *)
Definition encode_parallel_turbo_code_def:
  encode_parallel_turbo_code (ps, qs) perm bs =
  let
    state_length = MAX (LENGTH ps) (LENGTH qs) - 1;
    initial_state = REPLICATE state_length F;
  in
    interleave
    [bs ++ REPLICATE state_length F;
     encode_recursive_parity_equation_zero_tailed
     (ps, qs) initial_state bs;
     encode_recursive_parity_equation_zero_tailed
     (ps, qs) initial_state (perm bs)
    ]
End

(* -------------------------------------------------------------------------- *)
(* This is largely based on Fundamentals of Convolutional Coding by           *)
(* Rolf Johannesson and Kamil Sh. Zigangirov                                  *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* Also based on Turbo Coding, Turbo Equalisation and Space-Time Coding,      *)
(* Chapter 4 - Turbo Convolution Coding by J. P. Woodard and L. Hanzo         *)
(* -------------------------------------------------------------------------- *)

(* -------------------------------------------------------------------------- *)
(* Calculates the a posteriori probabilities through the turbo process.       *)
(*                                                                            *)
(* Stops after i turbo iterations.                                            *)
(*                                                                            *)
(* (ps, qs): The numerator and denominator parity equations                   *)
(* perm: The permutation used as part of the encoding process                 *)
(* p: the probability of error in the binary symmetric channel                *)
(* priors: The a priori probabilities that a given input is 1.                *)
(* rs: The received bitstring                                                 *)
(* i: The number of iterations to perform                                     *)
(*                                                                            *)
(* Output: the a posteriori probabilities that a given input is 1.            *)
(* -------------------------------------------------------------------------- *)
(* TODO: is the intrinsic information defined correctly?                      *)
(* TODO: Define this                                                          *)
(* -------------------------------------------------------------------------- *)
(*Definition parallel_turbo_code_a_posteriori_def:
  parallel_turbo_code_a_posteriori (ps, qs) perm p priors rs 0 = qs ∧
  parallel_turbo_code_a_posteriori (ps, qs) perm p priors rs (SUC i) =
  let
    rs_s = EL 0 (deinterleave 3 rs);
    rs_1 = EL 1 (deinterleave 3 rs);
    rs_2 = EL 2 (deinterleave 3 rs);
    intermediate_probs = parallel_turbo_code_a_posteriori
                         (ps, qs) perm p priors rs i;
    intrinsic_information = MAP (log_likelihood) (ARB (*TODO_INVOLVING_rs_s*));
    m = recursive_parity_equations_to_state_machine (ps, qs);
    num_t = LENGTH rs;
    decode_1_probs = MAP (bcjr_prob_wfm m p intermediate_probs rs_1)
                         (COUNT_LIST num_t);
    decode_2_probs = MAP (bcjr_prob_wfm m p (perm decode_1_probs) rs_2)
                         (COUNT_LIST num_t);
  in
    perm_inverse decode_2_probs
End*)

(* -------------------------------------------------------------------------- *)
(* Decodes a parallel turbo code                                              *)
(*                                                                            *)
(* Stops after i turbo iterations.                                            *)
(*                                                                            *)
(* In one turbo iteration, we apply the BCJR algorithm to the first turbo     *)
(* to update the a posteriori probabilities, and then apply it to the second  *)
(* turbo code to update the a posteriori probabilities again.                 *)
(*                                                                            *)
(* (ps, qs): The numerator and denominator parity equations                   *)
(* perm: The permutation used as part of the encoding process                 *)
(* p: the probability of error in the binary symmetric channel                *)
(* priors: The a priori probabilities that a given input is 1.                *)
(* rs: The received bitstring                                                 *)
(* i: The number of iterations to perform                                     *)
(*                                                                            *)
(* Output: the decoded bitstring                                              *)
(* -------------------------------------------------------------------------- *)
(* TODO: Complete this                                                        *)
(* -------------------------------------------------------------------------- *)
(*Definition decode_parallel_turbo_code_def:
  decode_parallel_turbo_code (ps, qs) perm p priors rs i =
  let
    a_posteriori_probs = parallel_turbo_code_a_posteriori
                         (ps, qs) perm p priors rs i;
  in
    MAP (λx. if 0.5 ≤ x then T else F) a_posteriori_probs
End*)

(* -------------------------------------------------------------------------- *)
(* Encoding and decoding a recursive parity equation using the BCJR algorithm *)
(* will return the original data again                                        *)
(*                                                                            *)
(* TODO: complete this                                                        *)
(* -------------------------------------------------------------------------- *)
(*Theorem encode_decode_parallel_turbo_code:
  (encode_parallel_turbo_code rs) ∘
  (decode_parallel_turbo_code rs) = I
Proof
QED*)

(* -------------------------------------------------------------------------- *)
(* Ensure that the decoding procedure for a recursive parity equation encoder *)
(* implements an a posteriori encoder (TODO: check that I have my terminology *)
(* correct)                                                                   *)
(*                                                                            *)
(* TODO: complete this                                                        *)
(* -------------------------------------------------------------------------- *)
(*Theorem decode_parallel_turbo_code_a_posteriori:
  (decode_parallel_turbo_code rs)
Proof
QED*)
